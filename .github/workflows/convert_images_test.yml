name: convert_images_test
on: workflow_dispatch
permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  convertimages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: PDF fix
        run: sudo mv /etc/ImageMagick-6/policy.xml /etc/ImageMagick-6/policy.xml.off && sudo apt-get update && sudo apt-get install -y ghostscript-x
      - name: poppler
        run: sudo apt-get install -y poppler-utils
      - name: pip install
        run: pip3 install iiif pdf2image Pillow iiif-prezi git+https://github.com/giacomomarchioro/pyIIIFpres
      - name: runscript
        run: python3 -c "exec(\"from iiif.static import IIIFStatic\nfrom IIIFpres import iiifpapi3\nfrom PIL import Image\nimport os\nfrom pdf2image import convert_from_path\nfrom iiif_prezi.factory import ManifestFactory\n\nfiles = [('images/FMJL4vpVEAcn5EE.jpeg', 'FMJL4vpVEAcn5EE')]\nmanifestlabel = '''test with colon&#58; test'''\ndst = os.path.join('img/derivatives/iiif/', 'test') + '/'\nbaseurl = os.path.join('https://dnoneill.github.io/testing/', dst)\ndata = []\nallfiles = []\nfor idx, filedict in enumerate(files):\n    file = filedict[0]\n    filepath,ext = file.rsplit('.', 1)\n    if ext == 'pdf':\n        images = convert_from_path(file)\n        for i in range(len(images)):\n            imagefilename = filepath + '-' + str(i) +'.jpg'\n            images[i].save(imagefilename, 'JPEG')\n            allfiles.append([imagefilename, filedict[1]])\n        os.remove(file)\n    elif ext != 'jpg' and ext != 'jpeg':\n        os.system('convert {} {}.jpg'.format(file, filepath))\n        allfiles.append(('%s.jpg'%filepath, filedict[1]))\n        os.remove(file)\n    else:\n        allfiles.append(filedict)\n\nfor filedict in allfiles:\n    file = filedict[0]\n    filepath,ext = file.rsplit('.', 1)\n    filename = os.path.basename(filepath)\n    if ext != 'jpg' and ext != 'jpeg':\n        os.system('convert {} {}.jpg'.format(file, filepath))\n    sg = IIIFStatic(prefix=baseurl, dst=dst)\n    sggenerate = sg.generate(file)\n    img = Image.open(file)\n    data.append((filename, img.width, img.height, os.path.join(baseurl, filename),'/full/full/0/default.jpg', filedict[1]))\n    iiiffulldir = os.path.join(dst, filename, 'full/full')\n    if not os.path.isdir(iiiffulldir):\n        os.mkdir(iiiffulldir)\n        iiiffulldir = os.path.join(iiiffulldir, '0')\n        os.mkdir(iiiffulldir)\n    else:\n        iiiffulldir = os.path.join(iiiffulldir, '0')\n    os.system('mv {} {}'.format(file, os.path.join(iiiffulldir, 'default.jpg')))\nfac = ManifestFactory()\nfac.set_base_prezi_uri('https://dnoneill.github.io/testing/')\nfac.set_base_image_uri(baseurl)\nfac.set_iiif_image_info(2.0, 2)\nmanifest = fac.manifest(ident=os.path.join(baseurl, 'manifest.json'), label=manifestlabel)\nmanifest.viewingDirection = 'left-to-right'\nmanifest.description = '''test with colon&#58; test'''\nrights = '''test with colon&#58; test'''\nif rights:\n    metadata = {}\n    metadata['rights'] = rights\n    manifest.set_metadata(metadata)\nseq = manifest.sequence()\nfor idx,d in enumerate(data):\n    fullurl = os.path.join(baseurl, d[0])\n    idx += 1\n    cvs = seq.canvas(ident='{}{}'.format(dst, d[0]), label=d[5])\n    anno = cvs.annotation(ident='{}/annotation/{}.json'.format(fullurl, idx))\n    img = anno.image(d[0], iiif=True)\n    cvs.height = d[2]\n    cvs.width = d[1]\n    img.height = d[2]\n    img.width = d[1]\n    filteredallfiles = [f for f in os.listdir(os.path.join(dst, d[0], 'full')) if f != 'full' and int(f.split(',')[0]) > 70]\n    filteredallfiles.sort()\n    size = filteredallfiles[0] if len(filteredallfiles) > 0 else '80,'\n    cvs.thumbnail = '{}/full/{}/0/default.jpg'.format(d[3], size)\nmanifeststring = manifest.toString(compact=False)\nwith open(os.path.join('img/derivatives/iiif/', 'test', 'manifest.json'), 'w') as f:\n    f.write(manifeststring)\n\n\")"
      - name: add page jekyll to manifest
        run: echo -e "---\n---\n$(cat img/derivatives/iiif/test/manifest.json)" > img/derivatives/iiif/test/manifest.json
      - name: commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config pull.rebase false
          git add -A
          git commit -m "Create test manifest and IIIF derivatives" -a || echo "No changes to commit"
      - name: pull
        run: git pull origin main
      - name: push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main 